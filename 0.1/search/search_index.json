{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Element Optogenetics", "text": "<p>DataJoint Element for managing data from optogenetics experiments. DataJoint Elements  collectively standardize and automate data collection and analysis for neuroscience  experiments.  Each Element is a modular pipeline for data storage and processing with  corresponding database tables that can be combined with other Elements to assemble a  fully functional pipeline.</p>"}, {"location": "#experiment-flowchart", "title": "Experiment Flowchart", "text": ""}, {"location": "#data-pipeline-diagram", "title": "Data Pipeline Diagram", "text": ""}, {"location": "#getting-started", "title": "Getting Started", "text": "<ul> <li>Install from PyPI<pre><code>pip install element-optogenetics\n</code></pre> </li> </ul> <ul> <li>Data Pipeline - Pipeline and table descriptions</li> </ul> <ul> <li>Tutorials - Start building your data pipeline</li> </ul> <ul> <li>Code Repository</li> </ul>"}, {"location": "#support", "title": "Support", "text": "<ul> <li>If you need help getting started or run into any errors, please contact our team by email at support@datajoint.com.</li> </ul>"}, {"location": "changelog/", "title": "Changelog", "text": "<p>Observes Semantic Versioning standard and Keep a Changelog convention.</p>"}, {"location": "changelog/#013-2023-05-12", "title": "0.1.3 - 2023-05-12", "text": "<ul> <li>Fix - Docs</li> </ul>"}, {"location": "changelog/#012-2023-05-11", "title": "0.1.2 - 2023-05-11", "text": "<ul> <li>Fix - <code>.ipynb</code> dark mode output for all notebooks.</li> </ul>"}, {"location": "changelog/#011-2023-04-19", "title": "0.1.1 - 2023-04-19", "text": "<ul> <li>Update - Docs by adding <code>Data Pipeline</code>, <code>Key Partnerships</code>, and <code>Roadmap</code> pages</li> <li>Update - README with links to tutorials and docs</li> </ul>"}, {"location": "changelog/#010-2022-12-19", "title": "0.1.0 - 2022-12-19", "text": "<ul> <li>Add - Table structure and basic docs (changelog, contribution guidelines, etc.)</li> </ul>"}, {"location": "citation/", "title": "Citation", "text": ""}, {"location": "citation/#citation", "title": "Citation", "text": "<p>If your work uses this Element, please cite the following manuscript and Research Resource Identifier (RRID).</p> <ul> <li>Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D,   Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for   Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358</li> </ul> <ul> <li>DataJoint Element Optogenetics - RRID:SCR_021894 - Version 0.1.3</li> </ul>"}, {"location": "concepts/", "title": "Concepts", "text": ""}, {"location": "concepts/#optogenetic-research", "title": "Optogenetic Research", "text": "<p>The seminal work by Karl Deisseroth and colleagues established a strategy for using light (opto-) to directly regulate the activation of genetically modified (-genetics) neurons  (Boyden et al., Nature Neuroscience 2005). By incorporating genes from photosensitive algae, neurons become sensitive to different  wavelengths for either excitation or inhibition. Scientists now use this technology to  draw more direct causal links between the activity of neuronal populations and  corresponding animal behavior.</p>"}, {"location": "partnerships/", "title": "Key Partnerships", "text": "<p>Key members of the U19 BrainCoGS project at Princeton University were consulted during development. The U19 BrainCoGS MATLAB pipeline serves as an important precursor project to this Element.</p>"}, {"location": "pipeline/", "title": "Data Pipeline", "text": "<p>Each node in the following diagram represents the analysis code in the workflow and the corresponding tables in the database.  Within the workflow, Element Optogenetics connects to upstream Elements including Lab, Animal, and Session.  For more detailed documentation on each table, see the API docs for the respective schemas.</p> <p></p>"}, {"location": "pipeline/#reference-schema-api-docs", "title": "<code>reference</code> schema (API docs)", "text": "Table Description Device Pulse generator device"}, {"location": "pipeline/#subject-schema-api-docs", "title": "<code>subject</code> schema (API docs)", "text": "<ul> <li>Although not required, most choose to connect the <code>Session</code> table to a <code>Subject</code> table.</li> </ul> Table Description Subject Basic information of the research subject"}, {"location": "pipeline/#surgery-schema-api-docs", "title": "<code>surgery</code> schema (API docs)", "text": "<ul> <li>The <code>Implantation</code> table can be user-defined , or one can choose to use the <code>surgery.Implantation</code> table from <code>element-animal</code>.</li> </ul> Table Description Implantation Location of an implanted device"}, {"location": "pipeline/#session-schema-api-docs", "title": "<code>session</code> schema (API docs)", "text": "Table Description Session Unique experimental session identifier"}, {"location": "pipeline/#optogenetics-schema-api-docs", "title": "<code>optogenetics</code> schema (API docs)", "text": "Table Description OptoWaveformType Stimulus waveform type (e.g., square, ramp, sine) OptoWaveform Shape of one cycle of the stimulus waveform OptoWaveform.Square Square waveform properties OptoWaveform.Ramp Ramp waveform properties OptoWaveform.Sine Sine waveform properties OptoStimParams Stimulus parameters OptoProtocol Protocol for a given session OptoEvent Start and end time of the stimulus within a session"}, {"location": "roadmap/", "title": "Roadmap", "text": "<p>This Element stores key information about optogenetic stimulus protocols used during  experimental sessions.</p> <ul> <li> Stimulus parameters (waveform properties, wavelength, power, duration, etc.)</li> <li> Implant location of the optical fiber</li> <li> Stimulus pulse generator</li> <li> Stimulus start and end times during an experimental session</li> </ul> <p>Further development of this Element is community driven.  Upon user requests and based  on guidance from the Scientific Steering Group we will add further features to this  Element.</p>"}, {"location": "api/element_optogenetics/optogenetics/", "title": "optogenetics.py", "text": ""}, {"location": "api/element_optogenetics/optogenetics/#element_optogenetics.optogenetics.activate", "title": "<code>activate(schema_name, *, create_schema=True, create_tables=True, linking_module=None)</code>", "text": "<p>Activate this schema.</p> <p>Parameters:</p> Name Type Description Default <code>schema_name</code> <code>str</code> <p>schema name on the database server</p> required <code>create_schema</code> <code>bool</code> <p>when True (default), create schema in the database if it                 does not yet exist.</p> <code>True</code> <code>create_tables</code> <code>bool</code> <p>when True (default), create schema tables in the database                  if they do not yet exist.</p> <code>True</code> <code>linking_module</code> <code>str</code> <p>a module (or name) containing the required dependencies.</p> <code>None</code> Dependencies <p>Upstream tables:     Device: Referenced by OptoProtocol. Pulse generator used for stimulation.     Session: Referenced by OptoProtocol. Typically a recording session.     Implantation: Referenced by OptoProtocol. Location of the implanted optical fiber.</p> Source code in <code>element_optogenetics/optogenetics.py</code> <pre><code>def activate(\n    schema_name: str,\n    *,\n    create_schema: bool = True,\n    create_tables: bool = True,\n    linking_module: str = None\n):\n\"\"\"Activate this schema.\n\n    Args:\n        schema_name (str): schema name on the database server\n        create_schema (bool): when True (default), create schema in the database if it\n                            does not yet exist.\n        create_tables (bool): when True (default), create schema tables in the database\n                             if they do not yet exist.\n        linking_module (str): a module (or name) containing the required dependencies.\n\n    Dependencies:\n        Upstream tables:\n            Device: Referenced by OptoProtocol. Pulse generator used for stimulation.\n            Session: Referenced by OptoProtocol. Typically a recording session.\n            Implantation: Referenced by OptoProtocol. Location of the implanted optical fiber.\n    \"\"\"\n\n    if isinstance(linking_module, str):\n        linking_module = importlib.import_module(linking_module)\n    assert inspect.ismodule(\n        linking_module\n    ), \"The argument 'linking_module' must be a module's name or a module\"\n\n    global _linking_module\n    _linking_module = linking_module\n\n    schema.activate(\n        schema_name,\n        create_schema=create_schema,\n        create_tables=create_tables,\n        add_objects=_linking_module.__dict__,\n    )\n</code></pre>"}, {"location": "api/element_optogenetics/optogenetics/#element_optogenetics.optogenetics.OptoWaveformType", "title": "<code>OptoWaveformType</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Stimulus waveform type (e.g., square, sine, etc.)</p> <p>Attributes:</p> Name Type Description <code>waveform_type</code> <code> varchar(32) </code> <p>Waveform type (e.g., square, sine)</p> Source code in <code>element_optogenetics/optogenetics.py</code> <pre><code>@schema\nclass OptoWaveformType(dj.Lookup):\n\"\"\"Stimulus waveform type (e.g., square, sine, etc.)\n\n    Attributes:\n        waveform_type ( varchar(32) ): Waveform type (e.g., square, sine)\n    \"\"\"\n\n    definition = \"\"\"\n    waveform_type:    varchar(32)\n    \"\"\"\n    contents = zip([\"Square\", \"Ramp\", \"Sine\"])\n</code></pre>"}, {"location": "api/element_optogenetics/optogenetics/#element_optogenetics.optogenetics.OptoWaveform", "title": "<code>OptoWaveform</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>OptoWaveform defines the shape of one cycle of the optogenetic stimulus</p> <p>Child tables specify features of specific waveforms (e.g., square, sine, etc.)</p> <p>Attributes:</p> Name Type Description <code>waveform_name</code> <code> varchar(32) </code> <p>Name of waveform</p> <code>OptoWaveformType</code> <code>foreign key</code> <p>OptoWaveformType primary key</p> <code>normalized_waveform</code> <code>longblob</code> <p>For one cycle, normalized to peak</p> <code>waveform_description</code> <code> varchar(255), optional </code> <p>Description of waveform</p> Source code in <code>element_optogenetics/optogenetics.py</code> <pre><code>@schema\nclass OptoWaveform(dj.Lookup):\n\"\"\"OptoWaveform defines the shape of one cycle of the optogenetic stimulus\n\n    Child tables specify features of specific waveforms (e.g., square, sine, etc.)\n\n    Attributes:\n        waveform_name ( varchar(32) ): Name of waveform\n        OptoWaveformType (foreign key): OptoWaveformType primary key\n        normalized_waveform (longblob, optional): For one cycle, normalized to peak\n        waveform_description ( varchar(255), optional ): Description of waveform\n    \"\"\"\n\n    definition = \"\"\"\n    # OptoWaveform defines the shape of one cycle of the optogenetic stimulus\n    waveform_name            : varchar(32)\n    ---\n    -&gt; OptoWaveformType\n    normalized_waveform=null : longblob      # For one cycle, normalized to peak\n    waveform_description=''  : varchar(255)  # description of the waveform\n    \"\"\"\n\n    class Square(dj.Part):\n\"\"\"Square waveform\n\n        Attributes:\n            OptoWaveform (foreign key): OptoWaveform primary key\n            on_proportion ( decimal(2, 2) unsigned ): Proportion of stimulus on time within a cycle\n            off_proportion ( decimal(2, 2) unsigned ): Proportion of stimulus off time within a cycle\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        ---\n        on_proportion  : decimal(2, 2) unsigned # Proportion of stimulus on time within a cycle\n        off_proportion : decimal(2, 2) unsigned # Proportion of stimulus off time within a cycle\n        \"\"\"\n\n    class Ramp(dj.Part):\n\"\"\"Ramp waveform\n\n        Attributes:\n            OptoWaveform (foreign key): OptoWaveform primary key\n            ramp_up_proportion ( decimal(2, 2) unsigned ): Ramp up proportion of the linear waveform\n            ramp_down_proportion ( decimal(2, 2) unsigned ): Ramp down proportion of the linear waveform\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        ---\n        ramp_up_proportion   : decimal(2, 2) unsigned # Ramp up proportion of the linear waveform\n        ramp_down_proportion : decimal(2, 2) unsigned # Ramp down proportion of the linear waveform\n        \"\"\"\n\n    class Sine(dj.Part):\n\"\"\"Sine Waveform. Starting_phase ranges (0, 2]. 0 for Sine, 0.5 for Cosine\n\n        Attributes:\n            OptoWaveform (foreign key): OptoWaveform primary key\n            number_of_cycles (smallint): Number of cycles\n            starting_phase (decimal(3, 2) ): Phase in pi at the beginning of the cycle.\n                Defaults to 0\n        \"\"\"\n\n        definition = \"\"\" # Starting_phase ranges (0, 2]. 0 for Sine, 0.5 for Cosine\n        -&gt; master\n        ---\n        number_of_cycles  : smallint\n        starting_phase=0  : decimal(3, 2) # (pi) phase at the beginning of the cycle\n        \"\"\"\n</code></pre>"}, {"location": "api/element_optogenetics/optogenetics/#element_optogenetics.optogenetics.OptoWaveform.Square", "title": "<code>Square</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Square waveform</p> <p>Attributes:</p> Name Type Description <code>OptoWaveform</code> <code>foreign key</code> <p>OptoWaveform primary key</p> <code>on_proportion</code> <code> decimal(2, 2) unsigned </code> <p>Proportion of stimulus on time within a cycle</p> <code>off_proportion</code> <code> decimal(2, 2) unsigned </code> <p>Proportion of stimulus off time within a cycle</p> Source code in <code>element_optogenetics/optogenetics.py</code> <pre><code>class Square(dj.Part):\n\"\"\"Square waveform\n\n    Attributes:\n        OptoWaveform (foreign key): OptoWaveform primary key\n        on_proportion ( decimal(2, 2) unsigned ): Proportion of stimulus on time within a cycle\n        off_proportion ( decimal(2, 2) unsigned ): Proportion of stimulus off time within a cycle\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    ---\n    on_proportion  : decimal(2, 2) unsigned # Proportion of stimulus on time within a cycle\n    off_proportion : decimal(2, 2) unsigned # Proportion of stimulus off time within a cycle\n    \"\"\"\n</code></pre>"}, {"location": "api/element_optogenetics/optogenetics/#element_optogenetics.optogenetics.OptoWaveform.Ramp", "title": "<code>Ramp</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Ramp waveform</p> <p>Attributes:</p> Name Type Description <code>OptoWaveform</code> <code>foreign key</code> <p>OptoWaveform primary key</p> <code>ramp_up_proportion</code> <code> decimal(2, 2) unsigned </code> <p>Ramp up proportion of the linear waveform</p> <code>ramp_down_proportion</code> <code> decimal(2, 2) unsigned </code> <p>Ramp down proportion of the linear waveform</p> Source code in <code>element_optogenetics/optogenetics.py</code> <pre><code>class Ramp(dj.Part):\n\"\"\"Ramp waveform\n\n    Attributes:\n        OptoWaveform (foreign key): OptoWaveform primary key\n        ramp_up_proportion ( decimal(2, 2) unsigned ): Ramp up proportion of the linear waveform\n        ramp_down_proportion ( decimal(2, 2) unsigned ): Ramp down proportion of the linear waveform\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    ---\n    ramp_up_proportion   : decimal(2, 2) unsigned # Ramp up proportion of the linear waveform\n    ramp_down_proportion : decimal(2, 2) unsigned # Ramp down proportion of the linear waveform\n    \"\"\"\n</code></pre>"}, {"location": "api/element_optogenetics/optogenetics/#element_optogenetics.optogenetics.OptoWaveform.Sine", "title": "<code>Sine</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Sine Waveform. Starting_phase ranges (0, 2]. 0 for Sine, 0.5 for Cosine</p> <p>Attributes:</p> Name Type Description <code>OptoWaveform</code> <code>foreign key</code> <p>OptoWaveform primary key</p> <code>number_of_cycles</code> <code>smallint</code> <p>Number of cycles</p> <code>starting_phase</code> <code>decimal(3, 2)</code> <p>Phase in pi at the beginning of the cycle. Defaults to 0</p> Source code in <code>element_optogenetics/optogenetics.py</code> <pre><code>class Sine(dj.Part):\n\"\"\"Sine Waveform. Starting_phase ranges (0, 2]. 0 for Sine, 0.5 for Cosine\n\n    Attributes:\n        OptoWaveform (foreign key): OptoWaveform primary key\n        number_of_cycles (smallint): Number of cycles\n        starting_phase (decimal(3, 2) ): Phase in pi at the beginning of the cycle.\n            Defaults to 0\n    \"\"\"\n\n    definition = \"\"\" # Starting_phase ranges (0, 2]. 0 for Sine, 0.5 for Cosine\n    -&gt; master\n    ---\n    number_of_cycles  : smallint\n    starting_phase=0  : decimal(3, 2) # (pi) phase at the beginning of the cycle\n    \"\"\"\n</code></pre>"}, {"location": "api/element_optogenetics/optogenetics/#element_optogenetics.optogenetics.OptoStimParams", "title": "<code>OptoStimParams</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>A single optical stimulus that repeats.</p> <p>Power and intensity are both optional. Users may wish to document one or the other.</p> <p>Attributes:</p> Name Type Description <code>opto_params_id</code> <code>smallint</code> <p>Stimulus parameter ID</p> <code>OptoWaveform</code> <code>foreign key</code> <p>OptoWaveform primary key</p> <code>wavelength</code> <code>int</code> <p>Wavelength in nm of optical stimulation light</p> <code>power</code> <code> decimal(6, 2), optional </code> <p>Total power in mW from light source</p> <code>light_intensity</code> <code> decimal(6, 2), optional </code> <p>Power for given area</p> <code>frequency</code> <code> decimal(5, 1) </code> <p>Frequency in Hz of the waveform</p> <code>duration</code> <code> decimal(5, 1) </code> <p>Duration in ms of each optical stimulus</p> Source code in <code>element_optogenetics/optogenetics.py</code> <pre><code>@schema\nclass OptoStimParams(dj.Manual):\n\"\"\"A single optical stimulus that repeats.\n\n    Power and intensity are both optional. Users may wish to document one or the other.\n\n    Attributes:\n        opto_params_id (smallint): Stimulus parameter ID\n        OptoWaveform (foreign key): OptoWaveform primary key\n        wavelength (int): Wavelength in nm of optical stimulation light\n        power ( decimal(6, 2), optional ): Total power in mW from light source\n        light_intensity ( decimal(6, 2), optional ): Power for given area\n        frequency ( decimal(5, 1) ): Frequency in Hz of the waveform\n        duration ( decimal(5, 1) ): Duration in ms of each optical stimulus\n    \"\"\"\n\n    definition = \"\"\"\n    # Defines a single optical stimulus that repeats.\n    opto_params_id     : smallint\n    ---\n    -&gt; OptoWaveform\n    wavelength           : int             # (nm) wavelength of optical stimulation light\n    power=null           : decimal(6, 2)   # (mW) total power from light source\n    light_intensity=null : decimal(6, 2)   # (mW/mm2) power for given area\n    frequency            : decimal(5, 1)   # (Hz) frequency of the waveform\n    duration             : decimal(5, 1)   # (ms) duration of each optical stimulus\n    \"\"\"\n</code></pre>"}, {"location": "api/element_optogenetics/optogenetics/#element_optogenetics.optogenetics.OptoProtocol", "title": "<code>OptoProtocol</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Protocol for a given session.  This table ties together the fiber location, pulse generator, and stimulus parameters.</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Session primary key</p> <code>protocol_id</code> <code>int</code> <p>Protocol ID</p> <code>OptoStimParams</code> <code>foreign key</code> <p>OptoStimParams primary key</p> <code>Implantation</code> <code>foreign key</code> <p>Implantation primary key</p> <code>Device</code> <code> (foreign key</code> <p>Device  primary key</p> <code>protocol_description</code> <code> varchar(255), optional </code> <p>Description of optogenetics protocol</p> Source code in <code>element_optogenetics/optogenetics.py</code> <pre><code>@schema\nclass OptoProtocol(dj.Manual):\n\"\"\"Protocol for a given session.  This table ties together the fiber location, pulse generator, and stimulus parameters.\n\n    Attributes:\n        Session (foreign key): Session primary key\n        protocol_id (int): Protocol ID\n        OptoStimParams (foreign key): OptoStimParams primary key\n        Implantation (foreign key): Implantation primary key\n        Device  (foreign key, optional): Device  primary key\n        protocol_description ( varchar(255), optional ): Description of optogenetics protocol\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Session\n    protocol_id: int\n    ---\n    -&gt; OptoStimParams\n    -&gt; Implantation\n    -&gt; [nullable] Device\n    protocol_description='' : varchar(255) # description of optogenetics protocol\n    \"\"\"\n</code></pre>"}, {"location": "api/element_optogenetics/optogenetics/#element_optogenetics.optogenetics.OptoEvent", "title": "<code>OptoEvent</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Start and end time of the stimulus within a session</p> <p>Attributes:</p> Name Type Description <code>OptoProtocol</code> <code>foreign key</code> <p>OptoProtocol primary key</p> <code>stim_start_time</code> <code>float</code> <p>Stimulus start time in seconds relative to session start</p> <code>stim_end_time</code> <code>float</code> <p>Stimulus end time in seconds relative to session start</p> Source code in <code>element_optogenetics/optogenetics.py</code> <pre><code>@schema\nclass OptoEvent(dj.Manual):\n\"\"\"Start and end time of the stimulus within a session\n\n    Attributes:\n        OptoProtocol (foreign key): OptoProtocol primary key\n        stim_start_time (float): Stimulus start time in seconds relative to session start\n        stim_end_time (float): Stimulus end time in seconds relative to session start\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; OptoProtocol\n    stim_start_time  : float  # (s) stimulus start time relative to session start\n    ---\n    stim_end_time    : float  # (s) stimulus end time relative session start\n    \"\"\"\n</code></pre>"}, {"location": "api/workflow_optogenetics/pipeline/", "title": "pipeline.py", "text": ""}, {"location": "api/workflow_optogenetics/pipeline/#workflow_optogenetics.pipeline.Device", "title": "<code>Device</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Table for managing lab devices.</p> <p>Attributes:</p> Name Type Description <code>device</code> <code> varchar(32) </code> <p>Device short name.</p> <code>modality</code> <code> varchar(64) </code> <p>Modality for which this device is used.</p> <code>description</code> <code> varchar(256), optional </code> <p>Description of device.</p> Source code in <code>workflow_optogenetics/reference.py</code> <pre><code>@schema\nclass Device(dj.Lookup):\n\"\"\"Table for managing lab devices.\n\n    Attributes:\n        device ( varchar(32) ): Device short name.\n        modality ( varchar(64) ): Modality for which this device is used.\n        description ( varchar(256), optional ): Description of device.\n    \"\"\"\n\n    definition = \"\"\"\n    device             : varchar(32)\n    ---\n    modality           : varchar(64)\n    description=''     : varchar(256)\n    \"\"\"\n    contents = [\n        [\"OPTG_4\", \"Optogenetics\", \"Doric Pulse Sequence Generator\"],\n    ]\n</code></pre>"}, {"location": "api/workflow_optogenetics/reference/", "title": "reference.py", "text": ""}, {"location": "api/workflow_optogenetics/reference/#workflow_optogenetics.reference.Device", "title": "<code>Device</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Table for managing lab devices.</p> <p>Attributes:</p> Name Type Description <code>device</code> <code> varchar(32) </code> <p>Device short name.</p> <code>modality</code> <code> varchar(64) </code> <p>Modality for which this device is used.</p> <code>description</code> <code> varchar(256), optional </code> <p>Description of device.</p> Source code in <code>workflow_optogenetics/reference.py</code> <pre><code>@schema\nclass Device(dj.Lookup):\n\"\"\"Table for managing lab devices.\n\n    Attributes:\n        device ( varchar(32) ): Device short name.\n        modality ( varchar(64) ): Modality for which this device is used.\n        description ( varchar(256), optional ): Description of device.\n    \"\"\"\n\n    definition = \"\"\"\n    device             : varchar(32)\n    ---\n    modality           : varchar(64)\n    description=''     : varchar(256)\n    \"\"\"\n    contents = [\n        [\"OPTG_4\", \"Optogenetics\", \"Doric Pulse Sequence Generator\"],\n    ]\n</code></pre>"}, {"location": "tutorials/", "title": "Tutorials", "text": "<ul> <li>DataJoint Elements are modular pipelines that can be connected into a complete workflow.  Workflow Optogenetics is an example that combines four DataJoint Elements - Lab, Animal, Session, and Optogenetics.</li> </ul> <ul> <li>Workflow Optogenetics includes an interactive tutorial on GitHub Codespaces, which is configured for users to run the pipeline.</li> </ul> <ul> <li>In the interactive tutorial, the example notebook describes the pipeline and provides instructions for adding data to the pipeline.</li> </ul>"}, {"location": "tutorials/#installation-instructions-for-active-projects", "title": "Installation Instructions for Active Projects", "text": "<ul> <li>The Workflow Optogenetics described above can be modified for a user's specific experimental requirements and thereby used in active projects.  </li> </ul> <ul> <li>The GitHub Codespace and Dev Container is configured for tutorials and prototyping. We recommend users to configure a database specifically for production pipelines.  Instructions for a local installation of the integrated development environment with a database can be found on the User Guide page.</li> </ul>"}, {"location": "tutorials/tutorial/", "title": "Notebook", "text": "In\u00a0[1]: Copied! <pre>import datajoint as dj\n</pre> import datajoint as dj In\u00a0[2]: Copied! <pre>from workflow_optogenetics.pipeline import lab, subject, surgery, session, optogenetics, Device\n</pre> from workflow_optogenetics.pipeline import lab, subject, surgery, session, optogenetics, Device <pre>[2023-05-05 03:13:02,092][WARNING]: lab.Project and related tables will be removed in a future version of Element Lab. Please use the project schema.\n[2023-05-05 03:13:02,117][INFO]: Connecting root@fakeservices.datajoint.io:3306\n[2023-05-05 03:13:02,146][INFO]: Connected root@fakeservices.datajoint.io:3306\n</pre> In\u00a0[3]: Copied! <pre>(\n    dj.Diagram(subject.Subject)\n    + dj.Diagram(surgery.Implantation)\n    + dj.Diagram(session.Session)\n    + dj.Diagram(Device)\n    + dj.Diagram(optogenetics)\n)\n</pre> (     dj.Diagram(subject.Subject)     + dj.Diagram(surgery.Implantation)     + dj.Diagram(session.Session)     + dj.Diagram(Device)     + dj.Diagram(optogenetics) ) Out[3]: %3 surgery.Implantation surgery.Implantation optogenetics.OptoProtocol optogenetics.OptoProtocol surgery.Implantation-&gt;optogenetics.OptoProtocol optogenetics.OptoEvent optogenetics.OptoEvent optogenetics.OptoWaveformType optogenetics.OptoWaveformType optogenetics.OptoWaveform optogenetics.OptoWaveform optogenetics.OptoWaveformType-&gt;optogenetics.OptoWaveform Device Device Device-&gt;optogenetics.OptoProtocol optogenetics.OptoWaveform.Sine optogenetics.OptoWaveform.Sine optogenetics.OptoWaveform-&gt;optogenetics.OptoWaveform.Sine optogenetics.OptoWaveform.Square optogenetics.OptoWaveform.Square optogenetics.OptoWaveform-&gt;optogenetics.OptoWaveform.Square optogenetics.OptoWaveform.Ramp optogenetics.OptoWaveform.Ramp optogenetics.OptoWaveform-&gt;optogenetics.OptoWaveform.Ramp optogenetics.OptoStimParams optogenetics.OptoStimParams optogenetics.OptoWaveform-&gt;optogenetics.OptoStimParams optogenetics.OptoProtocol-&gt;optogenetics.OptoEvent session.Session session.Session session.Session-&gt;optogenetics.OptoProtocol optogenetics.OptoStimParams-&gt;optogenetics.OptoProtocol subject.Subject subject.Subject subject.Subject-&gt;surgery.Implantation subject.Subject-&gt;session.Session <p>While the diagram above seems complex at first, it becomes more clear when it's approached as a hierarchy of tables that define the order in which the workflow expects to receive data in each of its tables.</p> <p>The tables higher up in the diagram such as <code>subject.Subject()</code> should be the first to receive data.</p> <p>Data is manually entered into the green, rectangular tables with the <code>insert1()</code> method.</p> <p>Tables connected by a solid line depend on entries from the table above it.</p> <p>There are 5 table tiers in DataJoint. Some of these tables appear in the diagram above.</p> Table tier Color and shape Description Manual table Green box Data entered from outside the pipeline, either by hand or with external helper scripts. Lookup table Gray box Small tables containing general facts and settings of the data pipeline; not specific to any experiment or dataset. Imported table Blue oval Data ingested automatically inside the pipeline but requiring access to data outside the pipeline. Computed table Red circle Data computed automatically entirely inside the pipeline. Part table Plain text Part tables share the same tier as their master table. In\u00a0[4]: Copied! <pre>subject.schema\n</pre> subject.schema Out[4]: <pre>Schema `neuro_subject`</pre> <p>The table classes in the module correspond to a table in the database.</p> In\u00a0[5]: Copied! <pre>subject.Subject()\n</pre> subject.Subject() Out[5]: <p>subject</p> <p>subject_nickname</p> <p>sex</p> <p>subject_birth_date</p> <p>subject_description</p> <p>Total: 0</p> <p>We can view the table dependencies and the attributes we need to insert by using the functions <code>.describe()</code> and <code>.heading</code>.  The <code>describe()</code> function displays the table definition with foreign key references and the <code>heading</code> function displays the attributes of the table definition.  These are particularly useful functions if you are new to DataJoint Elements and are unsure of the attributes required for each table.</p> In\u00a0[6]: Copied! <pre>print(subject.Subject.describe())\n</pre> print(subject.Subject.describe()) Out[6]: <pre>'subject              : varchar(8)                   \\n---\\nsubject_nickname=\"\"  : varchar(64)                  \\nsex                  : enum(\\'M\\',\\'F\\',\\'U\\')            \\nsubject_birth_date   : date                         \\nsubject_description=\"\" : varchar(1024)                \\n'</pre> In\u00a0[7]: Copied! <pre>subject.Subject.heading\n</pre> subject.Subject.heading Out[7]: <pre># \nsubject              : varchar(8)                   # \n---\nsubject_nickname=\"\"  : varchar(64)                  # \nsex                  : enum('M','F','U')            # \nsubject_birth_date   : date                         # \nsubject_description=\"\" : varchar(1024)                # </pre> <p>We will insert data into the <code>subject.Subject</code> table.</p> In\u00a0[8]: Copied! <pre>subject.Subject.insert1(\n    dict(\n        subject=\"subject1\",\n        sex=\"F\",\n        subject_birth_date=\"2020-01-01\",\n        subject_description=\"Optogenetic pilot subject\",\n    )\n)\nsubject.Subject()\n</pre> subject.Subject.insert1(     dict(         subject=\"subject1\",         sex=\"F\",         subject_birth_date=\"2020-01-01\",         subject_description=\"Optogenetic pilot subject\",     ) ) subject.Subject() Out[8]: <p>subject</p> <p>subject_nickname</p> <p>sex</p> <p>subject_birth_date</p> <p>subject_description</p> subject1 F 2020-01-01 Optogenetic pilot subject <p>Total: 1</p> <p>Let's continue inserting in the other manual tables.  The <code>Session</code> table is next.</p> In\u00a0[9]: Copied! <pre>print(session.Session.describe())\n</pre> print(session.Session.describe()) Out[9]: <pre>'-&gt; subject.Subject\\nsession_id           : int                          \\n---\\nsession_datetime     : datetime                     \\n'</pre> In\u00a0[10]: Copied! <pre>session.Session.heading\n</pre> session.Session.heading Out[10]: <pre># \nsubject              : varchar(8)                   # \nsession_id           : int                          # \n---\nsession_datetime     : datetime                     # </pre> <p>The cells above show the dependencies and attributes for the <code>session.Session</code> table.</p> <p>Notice that <code>describe</code> shows the dependencies of the table on upstream tables (i.e. foreign key references). The <code>Session</code> table depends on the upstream <code>Subject</code> table.</p> <p>Whereas <code>heading</code> lists all the attributes of the <code>Session</code> table, regardless of whether they are declared in an upstream table.</p> In\u00a0[11]: Copied! <pre>session.Session.insert1(\n    dict(\n        subject=\"subject1\", \n        session_id=\"1\", \n        session_datetime=\"2022-04-04 12:22:15.032\"\n     )\n)\nsession.Session()\n</pre> session.Session.insert1(     dict(         subject=\"subject1\",          session_id=\"1\",          session_datetime=\"2022-04-04 12:22:15.032\"      ) ) session.Session() Out[11]: <p>subject</p> <p>session_id</p> <p>session_datetime</p> subject1 1 2022-04-04 12:22:15 <p>Total: 1</p> <p>The <code>OptoProtocol</code> table's attributes include the <code>Session</code> and <code>Device</code> tables.  Let's insert into the <code>Device</code> table.</p> In\u00a0[12]: Copied! <pre>Device.insert1(\n    dict(\n        device=\"OPTG_8\",\n        modality=\"Optogenetics\",\n        description=\"8 channel pulse sequence device\",\n    )\n)\nDevice()\n</pre> Device.insert1(     dict(         device=\"OPTG_8\",         modality=\"Optogenetics\",         description=\"8 channel pulse sequence device\",     ) ) Device() Out[12]: <p>device</p> <p>modality</p> <p>description</p> OPTG_4 Optogenetics Doric Pulse Sequence GeneratorOPTG_8 Optogenetics 8 channel pulse sequence device <p>Total: 2</p> <p>The <code>surgery.Implantation</code> table's attribute includes the <code>User</code> table.  Let's insert into the <code>User</code> table.</p> In\u00a0[13]: Copied! <pre>lab.User.insert1(\n    dict(user=\"User1\")\n)\nlab.User()\n</pre> lab.User.insert1(     dict(user=\"User1\") ) lab.User() Out[13]: Table for storing user information. <p>user</p> username, short identifier <p>user_email</p> <p>user_cellphone</p> <p>user_fullname</p> Full name used to uniquely identify an individual User1 <p>Total: 1</p> <p>The <code>Implantation</code> table's attributes includes the <code>CoordinateReference</code> and <code>Hemisphere</code> tables.  Let's view the contents of these lookup tables, which have default contents.</p> In\u00a0[14]: Copied! <pre>surgery.CoordinateReference()\n</pre> surgery.CoordinateReference() Out[14]: <p>reference</p> bregmaduralambdasagittal_suturesinusskull_surface <p>Total: 6</p> In\u00a0[15]: Copied! <pre>surgery.Hemisphere()\n</pre> surgery.Hemisphere() Out[15]: <p>hemisphere</p> Brain region hemisphere leftmiddleright <p>Total: 3</p> <p>Insert a new entry for the location of the optogenetics probe.</p> In\u00a0[16]: Copied! <pre>surgery.BrainRegion.insert1(\n    dict(\n        region_acronym=\"dHP\", \n        region_name=\"Dorsal Hippocampus\")\n)\nsurgery.BrainRegion()\n</pre> surgery.BrainRegion.insert1(     dict(         region_acronym=\"dHP\",          region_name=\"Dorsal Hippocampus\") ) surgery.BrainRegion() Out[16]: <p>region_acronym</p> Brain region shorthand <p>region_name</p> Brain region full name dHP Dorsal Hippocampus <p>Total: 1</p> In\u00a0[17]: Copied! <pre>surgery.Implantation.insert1(\n    dict(\n        subject=\"subject1\",\n        implant_date=\"2022-04-01 12:13:14\",\n        implant_type=\"opto\",\n        target_region=\"dHP\",\n        target_hemisphere=\"left\",\n        surgeon=\"User1\",\n    )\n)\nsurgery.Implantation.Coordinate.insert1(\n    dict(\n        subject=\"subject1\",\n        implant_date=\"2022-04-01 12:13:14\",\n        implant_type=\"opto\",\n        target_region=\"dHP\",\n        target_hemisphere=\"left\",\n        ap=\"-7.9\",      # [mm] anterior-posterior distance\n        ap_ref=\"bregma\",\n        ml=\"-1.8\",      # [mm] medial axis distance\n        ml_ref=\"bregma\",\n        dv=\"5\",         # [mm] dorso-ventral axis distance\n        dv_ref=\"skull_surface\",\n        theta=\"11.5\",   # [0, 180] degree rotation about ml-axis relative to z\n        phi=\"0\",        # [0, 360] degree rotation about dv-axis relative to x\n        beta=None,      # [-180, 180] degree rotation about shank relative to anterior\n    )\n)\nsurgery.Implantation.Coordinate()\n</pre> surgery.Implantation.insert1(     dict(         subject=\"subject1\",         implant_date=\"2022-04-01 12:13:14\",         implant_type=\"opto\",         target_region=\"dHP\",         target_hemisphere=\"left\",         surgeon=\"User1\",     ) ) surgery.Implantation.Coordinate.insert1(     dict(         subject=\"subject1\",         implant_date=\"2022-04-01 12:13:14\",         implant_type=\"opto\",         target_region=\"dHP\",         target_hemisphere=\"left\",         ap=\"-7.9\",      # [mm] anterior-posterior distance         ap_ref=\"bregma\",         ml=\"-1.8\",      # [mm] medial axis distance         ml_ref=\"bregma\",         dv=\"5\",         # [mm] dorso-ventral axis distance         dv_ref=\"skull_surface\",         theta=\"11.5\",   # [0, 180] degree rotation about ml-axis relative to z         phi=\"0\",        # [0, 360] degree rotation about dv-axis relative to x         beta=None,      # [-180, 180] degree rotation about shank relative to anterior     ) ) surgery.Implantation.Coordinate() Out[17]: <p>subject</p> <p>implant_date</p> surgery date <p>implant_type</p> Short name for type of implanted device <p>target_region</p> Brain region shorthand <p>target_hemisphere</p> Brain region hemisphere <p>ap</p> (mm) anterior-posterior; ref is 0 <p>ap_ref</p> <p>ml</p> (mm) medial axis; ref is 0 <p>ml_ref</p> <p>dv</p> (mm) dorso-ventral axis; ventral negative <p>dv_ref</p> <p>theta</p> (deg) rot about ml-axis [0, 180] wrt z <p>phi</p> (deg) rot about dv-axis [0, 360] wrt x <p>beta</p> (deg) rot about shank [-180, 180] wrt anterior subject1 2022-04-01 12:13:14 opto dHP left -7.9 bregma -1.8 bregma 5.0 skull_surface 11.5 0.0 nan <p>Total: 1</p> <p>We'll add information to describe the stimulus, including waveform shape and stimulation parameters.</p> In\u00a0[18]: Copied! <pre>optogenetics.OptoWaveform.insert1(\n    dict(\n        waveform_name=\"square_10\",\n        waveform_type=\"square\",\n        waveform_description=\"Square waveform: 10%/90% on/off cycle\",\n    )\n)\n\n# Square is one part table of OptoWaveform.\n# For sine and ramp waveforms, see the corresponding tables.\noptogenetics.OptoWaveform.Square.insert1(\n    dict(\n        waveform_name=\"square_10\", \n        on_proportion=0.10, \n        off_proportion=0.90)\n)\noptogenetics.OptoWaveform.Square()\n</pre> optogenetics.OptoWaveform.insert1(     dict(         waveform_name=\"square_10\",         waveform_type=\"square\",         waveform_description=\"Square waveform: 10%/90% on/off cycle\",     ) )  # Square is one part table of OptoWaveform. # For sine and ramp waveforms, see the corresponding tables. optogenetics.OptoWaveform.Square.insert1(     dict(         waveform_name=\"square_10\",          on_proportion=0.10,          off_proportion=0.90) ) optogenetics.OptoWaveform.Square() Out[18]: <p>waveform_name</p> <p>on_proportion</p> Proportion of stimulus on time within a cycle <p>off_proportion</p> Proportion of stimulus off time within a cycle square_10 0.10 0.90 <p>Total: 1</p> In\u00a0[19]: Copied! <pre>optogenetics.OptoStimParams.insert1(\n    dict(\n        opto_params_id=1,\n        waveform_name=\"square_10\",\n        wavelength=470,\n        light_intensity=10.2,\n        frequency=1,\n        duration=241,\n    )\n)\noptogenetics.OptoStimParams()\n</pre> optogenetics.OptoStimParams.insert1(     dict(         opto_params_id=1,         waveform_name=\"square_10\",         wavelength=470,         light_intensity=10.2,         frequency=1,         duration=241,     ) ) optogenetics.OptoStimParams() Out[19]: Defines a single optical stimulus that repeats. <p>opto_params_id</p> <p>waveform_name</p> <p>wavelength</p> (nm) wavelength of optical stimulation light <p>power</p> (mW) total power from light source <p>light_intensity</p> (mW/mm2) power for given area <p>frequency</p> (Hz) frequency of the waveform <p>duration</p> (ms) duration of each optical stimulus 1 square_10 470 None 10.20 1.0 241.0 <p>Total: 1</p> <p>Next, we'll describe the session in which these parameters are used in <code>OptoProtocol</code>.</p> In\u00a0[20]: Copied! <pre>optogenetics.OptoProtocol.insert1(\n    dict(\n        subject=\"subject1\",\n        session_id=\"1\",\n        protocol_id=\"1\",\n        opto_params_id=\"1\",\n        implant_date=\"2022-04-01 12:13:14\",\n        implant_type=\"opto\",\n        target_region=\"dHP\",\n        target_hemisphere=\"left\",\n        device=\"OPTG_4\",\n    )\n)\noptogenetics.OptoProtocol()\n</pre> optogenetics.OptoProtocol.insert1(     dict(         subject=\"subject1\",         session_id=\"1\",         protocol_id=\"1\",         opto_params_id=\"1\",         implant_date=\"2022-04-01 12:13:14\",         implant_type=\"opto\",         target_region=\"dHP\",         target_hemisphere=\"left\",         device=\"OPTG_4\",     ) ) optogenetics.OptoProtocol() Out[20]: <p>subject</p> <p>session_id</p> <p>protocol_id</p> <p>opto_params_id</p> <p>implant_date</p> surgery date <p>implant_type</p> Short name for type of implanted device <p>target_region</p> Brain region shorthand <p>target_hemisphere</p> Brain region hemisphere <p>device</p> <p>protocol_description</p> description of optogenetics protocol subject1 1 1 1 2022-04-01 12:13:14 opto dHP left OPTG_4 <p>Total: 1</p> <p>We can describe the timing of these stimulations in <code>OptoEvent</code>.</p> In\u00a0[21]: Copied! <pre>optogenetics.OptoEvent.insert1(\n    dict(\n        subject=\"subject1\",\n        session_id=1,\n        protocol_id=1,\n        stim_start_time=241,\n        stim_end_time=482,\n    )\n)\noptogenetics.OptoEvent()\n</pre> optogenetics.OptoEvent.insert1(     dict(         subject=\"subject1\",         session_id=1,         protocol_id=1,         stim_start_time=241,         stim_end_time=482,     ) ) optogenetics.OptoEvent() Out[21]: <p>subject</p> <p>session_id</p> <p>protocol_id</p> <p>stim_start_time</p> (s) stimulus start time relative to session start <p>stim_end_time</p> (s) stimulus end time relative session start subject1 1 1 241.0 482.0 <p>Total: 1</p> <p>We can insert a  second set of timing information for the stimulation.</p> In\u00a0[22]: Copied! <pre>optogenetics.OptoEvent.insert1(\n    dict(\n        subject=\"subject1\",\n        session_id=1,\n        protocol_id=1,\n        stim_start_time=543,\n        stim_end_time=797,\n    )\n)\noptogenetics.OptoEvent()\n</pre> optogenetics.OptoEvent.insert1(     dict(         subject=\"subject1\",         session_id=1,         protocol_id=1,         stim_start_time=543,         stim_end_time=797,     ) ) optogenetics.OptoEvent() Out[22]: <p>subject</p> <p>session_id</p> <p>protocol_id</p> <p>stim_start_time</p> (s) stimulus start time relative to session start <p>stim_end_time</p> (s) stimulus end time relative session start subject1 1 1 241.0 482.0subject1 1 1 543.0 797.0 <p>Total: 2</p> In\u00a0[23]: Copied! <pre>optogenetics.OptoEvent()\n</pre> optogenetics.OptoEvent() Out[23]: <p>subject</p> <p>session_id</p> <p>protocol_id</p> <p>stim_start_time</p> (s) stimulus start time relative to session start <p>stim_end_time</p> (s) stimulus end time relative session start subject1 1 1 241.0 482.0subject1 1 1 543.0 797.0 <p>Total: 2</p> <p>With the <code>&amp;</code> operator, we will restrict the contents of the <code>OptoEvent</code> table to those entries with a <code>stim_start_time</code> of 543.</p> In\u00a0[24]: Copied! <pre>optogenetics.OptoEvent &amp; \"stim_start_time=543\"\n</pre> optogenetics.OptoEvent &amp; \"stim_start_time=543\" Out[24]: <p>subject</p> <p>session_id</p> <p>protocol_id</p> <p>stim_start_time</p> (s) stimulus start time relative to session start <p>stim_end_time</p> (s) stimulus end time relative session start subject1 1 1 543.0 797.0 <p>Total: 1</p> <p>DataJoint queries can be a highly flexible tool with several operators.  The next operator we will explore is <code>join</code> which combines matching information from tables.</p> In\u00a0[25]: Copied! <pre>optogenetics.OptoProtocol * optogenetics.OptoStimParams\n</pre> optogenetics.OptoProtocol * optogenetics.OptoStimParams Out[25]: <p>subject</p> <p>session_id</p> <p>protocol_id</p> <p>opto_params_id</p> <p>implant_date</p> surgery date <p>implant_type</p> Short name for type of implanted device <p>target_region</p> Brain region shorthand <p>target_hemisphere</p> Brain region hemisphere <p>device</p> <p>protocol_description</p> description of optogenetics protocol <p>waveform_name</p> <p>wavelength</p> (nm) wavelength of optical stimulation light <p>power</p> (mW) total power from light source <p>light_intensity</p> (mW/mm2) power for given area <p>frequency</p> (Hz) frequency of the waveform <p>duration</p> (ms) duration of each optical stimulus subject1 1 1 1 2022-04-01 12:13:14 opto dHP left OPTG_4 square_10 470 None 10.20 1.0 241.0 <p>Total: 1</p> In\u00a0[26]: Copied! <pre>optogenetics.OptoEvent.fetch(as_dict=True)\n</pre> optogenetics.OptoEvent.fetch(as_dict=True) Out[26]: <pre>[{'subject': 'subject1',\n  'session_id': 1,\n  'protocol_id': 1,\n  'stim_start_time': 241.0,\n  'stim_end_time': 482.0},\n {'subject': 'subject1',\n  'session_id': 1,\n  'protocol_id': 1,\n  'stim_start_time': 543.0,\n  'stim_end_time': 797.0}]</pre> <p>Next, we will fetch the entry with a <code>stim_start_time</code> of 543 with the <code>fetch1</code> method, which returns a dictionary containing all attributes of one entry in the table.</p> In\u00a0[27]: Copied! <pre>(optogenetics.OptoEvent &amp; \"stim_start_time=543\").fetch1()\n</pre> (optogenetics.OptoEvent &amp; \"stim_start_time=543\").fetch1() Out[27]: <pre>{'subject': 'subject1',\n 'session_id': 1,\n 'protocol_id': 1,\n 'stim_start_time': 543.0,\n 'stim_end_time': 797.0}</pre>"}, {"location": "tutorials/tutorial/#manage-optogenetics-experiments-with-datajoint-elements", "title": "Manage optogenetics experiments with DataJoint Elements\u00b6", "text": "<p>In this tutorial, we will walk through storing optogenetic stimulus data with the DataJoint Workflow for Optogenetics.</p> <p>We will explain the following concepts as they relate to this workflow:</p> <ul> <li>What is an Element versus a Workflow?</li> <li>Plot the workflow with <code>dj.Diagram</code></li> <li>Insert data into tables</li> <li>Query table contents</li> <li>Fetch table contents</li> <li>Run the workflow for your experiments</li> </ul> <p>For detailed documentation and tutorials on general DataJoint principles that support collaboration, automation, reproducibility, and visualizations:</p> <ul> <li><p>DataJoint Interactive Tutorials - Fundamentals including table tiers, query operations, fetch operations, automated computations with the <code>make</code> function, etc.</p> </li> <li><p>DataJoint Core - Documentation - Relational data model principles</p> </li> <li><p>DataJoint API for Python - Documentation</p> </li> <li><p>DataJoint Element for Optogenetics - Documentation</p> </li> </ul> <p>Let's start by importing the packages necessary to run this workflow.</p>"}, {"location": "tutorials/tutorial/#the-datajoint-workflow-for-optogenetics-is-assembled-from-4-datajoint-elements", "title": "The DataJoint Workflow for Optogenetics is assembled from 4 DataJoint Elements\u00b6", "text": "Element Source Code Documentation Description Element Lab Link Link Lab management related information, such as Lab, User, Project, Protocol, Source. Element Animal Link Link General animal metadata and surgery information. Element Session Link Link General information of experimental sessions. Element Optogenetics Link Link Optogenetics stimulus and timing data. <p>Each workflow is composed of multiple Elements. Each Element contains 1 or more modules, and each module declares its own schema in the database.</p> <p>The Elements are imported within the <code>workflow_optogenetics.pipeline</code> script.</p> <p>By importing the modules for the first time, the schemas and tables will be created in the database.  Once created, importing modules will not create schemas and tables again, but the existing schemas/tables can be accessed.</p> <p>The schema diagram (shown below) is a good reference for understanding the order of the tables within the workflow.</p> <p>Let's activate the Elements.</p>"}, {"location": "tutorials/tutorial/#diagram", "title": "Diagram\u00b6", "text": "<p>We can plot the diagram of tables within multiple schemas and their dependencies using <code>dj.Diagram()</code>.  For details, see the documentation.</p>"}, {"location": "tutorials/tutorial/#insert-entries-into-manual-tables", "title": "Insert entries into manual tables\u00b6", "text": "<p>In this section, we will insert metadata about an animal subject, experiment session, and optogenetic stimulation parameters.</p> <p>Let's start with the first schema and table in the schema diagram (i.e. <code>subject.Subject</code> table).</p> <p>Each module (e.g. <code>subject</code>) contains a schema object that enables interaction with the schema in the database.</p>"}, {"location": "tutorials/tutorial/#query", "title": "Query\u00b6", "text": "<p>Queries allow you to view the contents of the database.  The simplest query is the instance of the table class.</p>"}, {"location": "tutorials/tutorial/#fetch", "title": "Fetch\u00b6", "text": "<p>The <code>fetch</code> and <code>fetch1</code> methods download the data from the query object into the workspace.</p> <p>Below we will run <code>fetch()</code> without any arguments to return all attributes of all entries in the table.</p>"}, {"location": "tutorials/tutorial/#next-steps", "title": "Next steps\u00b6", "text": "<p>Follow the steps below to run this workflow for your experiments:</p> <ul> <li>Create a fork of this repository to your GitHub account.</li> <li>Clone the repository to your local machine and configure for use with the instructions in the User Guide.</li> <li>The DataJoint team offers free Office Hours to help you setup this workflow.</li> <li>If you have any questions, please reach out at support@datajoint.com.</li> </ul>"}]}